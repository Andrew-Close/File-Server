type: edu
files:
  - name: test/FileServerTest.java
    visible: false
    text: |+
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.AfterClass;
      
      import java.io.File;
      import java.net.ConnectException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.List;
      
      import static org.hyperskill.hstest.common.Utils.sleep;
      
      public class FileServerTest extends StageTest<String> {
      
          private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
              "Make sure the server handles connections and doesn't stop after one client connected.";
      
          public static final String serverDataPath = System.getProperty("user.dir") +
              File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;
      
          public static final String clientDataPath = System.getProperty("user.dir") +
              File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;
      
          private static String id;
      
          @Override
          public List<TestCase<String>> generate() {
              return List.of(
                  new TestCase<String>()
                      .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                      .setDynamicTesting(this::checkServerStop),
                  new TestCase<String>()
                      .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                      .setDynamicTesting(this::checkPaths),
                  new TestCase<String>()
                      .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                      .setDynamicTesting(this::testSaveAndGet),
                  new TestCase<String>()
                      .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                      .setDynamicTesting(this::testGetAfterServerRestart),
                  new TestCase<String>()
                      .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                      .setDynamicTesting(this::testDeleteFiles)
              );
          }
      
          // Test #1. Check if server stops
          CheckResult checkServerStop() {
      
              TestedProgram server = getServer();
              TestedProgram client;
      
              server.startInBackground();
      
              client = getClient();
              client.start();
              client.execute("exit");
      
              try {
                  Thread.sleep(500);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (!server.isFinished()) {
                  return CheckResult.wrong("You should stop the server if a client sends 'exit'");
              }
      
              return CheckResult.correct();
          }
      
          CheckResult checkPaths() {
              // Test #2. Check folders with data
              if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                  return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                      "The folder should be created even if the server wasn't started!");
              }
      
              if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                  return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                      "store on the server in it!\n" +
                      "The folder should be created even if the client wasn't started!");
              }
              return CheckResult.correct();
          }
      
      
          CheckResult testSaveAndGet() {
      
              TestedProgram server;
              TestedProgram client;
      
              Utils.createFiles(clientDataPath);
      
              // Test #3. Check saving file on the server
              server = getServer();
              server.startInBackground();
      
              File folder = new File(serverDataPath);
              int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);
      
              client = getClient();
              client.start();
              client.execute("2\ntest_purpose_test1.txt");
              String clientOutput = client.execute("");
      
              if (!clientOutput.contains("Response says that file is saved! ID =")) {
                  return CheckResult.wrong("After saving a file on the server you should print:\n" +
                      "Response says that file is saved! ID = **, where ** is an id of the file!");
              }
      
              id = Utils.findId(clientOutput);
      
              int numOfFilesAfterAdding = Utils.numExistingFiles(folder);
      
              if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                  return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
              }
      
              client = getClient();
              client.start();
              clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");
      
              if (!clientOutput.contains("Response says that file is saved! ID =")) {
                  return CheckResult.wrong("After saving a file on the server you should print:\n" +
                      "Response says that file is saved! ID = **, where ** is an id of the file!");
              }
      
              if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                  return CheckResult.wrong("Can't find a file after saving on the server." +
                      "You should save client's files in /server/data/ folder!");
              }
      
              String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");
      
              if (!savedFileContent.equals("test2")) {
                  return CheckResult.wrong("A file after saving has wrong content!");
              }
      
              // Test #4. Check getting files
              client = getClient();
              client.start();
              clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");
      
              if (!clientOutput.contains("The response says that this file is not found!")) {
                  return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                      "\"The response says that this file is not found!\"");
              }
      
              client = getClient();
              client.start();
              clientOutput = client.execute("1\n2\n" + (id + "511"));
      
              if (!clientOutput.contains("The response says that this file is not found!")) {
                  return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                      "\"The response says that this file is not found!\"");
              }
      
              client = getClient();
              client.start();
              client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");
      
              if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                  return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                      "You should store all downloaded files from the server in /client/data/ folder.");
              }
      
              String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
              if (!downloadedByNameFileContent.equals("test2")) {
                  return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
              }
      
              client = getClient();
              client.start();
              client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");
      
              if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                  return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                      "You should store all downloaded files from the server in /client/data/ folder.");
              }
      
              String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
              if (!downloadedByIdFileContent.equals("test1")) {
                  return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
              }
      
              client = getClient();
              client.start();
              client.execute("exit");
      
              return CheckResult.correct();
          }
      
          CheckResult testGetAfterServerRestart() {
      
              TestedProgram server = getServer();
              TestedProgram client = getClient();
      
              server.startInBackground();
              client.start();
              client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");
      
              if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                  return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                      "Looks like your server lose all stored files after restart.\n" +
                      "You should store all downloaded files from the server in /client/data/ folder.");
              }
      
              client = getClient();
              client.start();
              client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");
      
              if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                  return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                      "Looks like your server lose all stored files after restart.\n" +
                      "You should store all downloaded files from the server in /client/data/ folder.");
              }
      
              client = getClient();
              client.start();
              client.execute("exit");
      
              return CheckResult.correct();
          }
      
          CheckResult testDeleteFiles() {
      
              TestedProgram server = getServer();
              TestedProgram client = getClient();
      
              File folder = new File(serverDataPath);
              int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);
      
              server.startInBackground();
              client.start();
              client.execute("3\n1\ntest_purpose_newFile.txt");
      
              sleep(2000);
              int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
              if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                  return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                      "number of files in /server/data/ should be fewer!");
              }
      
              client = getClient();
              client.start();
              client.execute("3\n2\n" + id);
      
              sleep(2000);
              int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
              if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                  return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                      "number of files in /server/data/ should be fewer!");
              }
      
              client = getClient();
              client.start();
              client.execute("exit");
      
              return CheckResult.correct();
          }
      
      
          @AfterClass
          public static void afterTestDeleteFiles() {
              Utils.deleteTestFiles();
          }
      
          public static TestedProgram getClient() {
              return new TestedProgram("client");
          }
      
          public static TestedProgram getServer() {
              return new TestedProgram("server");
          }
      }
    
    
    learner_created: false
  - name: src/server/main/Interpretation.java
    visible: true
    text: |
      package server.main;
      
      /**
       * Simply a class for holding and getting information about an interpretation.
       */
      public class Interpretation {
          private final int id;
          private String[] data = new String[1];
          public Interpretation(int id) {
              this.id = id;
          }
          public Interpretation(int id, String[] data) {
              this.id = id;
              this.data = data;
          }
          public int getId() {
              return id;
          }
          public String[] getData() {
              return data;
          }
      }
    learner_created: true
  - name: src/server/main/Main.java
    visible: true
    text: |-
      package server.main;
      
      import java.io.*;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.Arrays;
      
      import static config.Config.STORAGE_FOLDER;
      
      public class Main {
          private static final CommandInterpreter interpreter = new CommandInterpreter();
      
          public static void main(String[] args) throws IOException {
              // The entire runtime of the server
              serverRuntime();
          }
      
          /**
           * The entire runtime of the server where the user continuously inputs commands until they input exit.
           */
          private static void serverRuntime() throws IOException {
              try (ServerSocket server = new ServerSocket(23456))
              {
                  System.out.println("Server started!");
                  serverloop:
                  while (true) {
                      try (Socket socket = server.accept();
                           DataInputStream input = new DataInputStream(socket.getInputStream());
                           DataOutputStream output = new DataOutputStream(socket.getOutputStream()))
                      {
                          String[] command = input.readUTF().split(" ");
                          // Contains the information about how to act upon the command that the user inputted
                          Interpretation interpretation = interpreter.interpret(command);
                          String statusCode = null;
                          // The id is the operation id. It shows which operation should be executed
                          switch (interpretation.getId()) {
                              // Get file
                              case 1:
                                  statusCode = getFile(interpretation.getData()[0]);
                                  break;
                              // Add file
                              case 2:
                                  statusCode = addFile(interpretation.getData());
                                  break;
                              // Delete file
                              case 3:
                                  statusCode = deleteFile(interpretation.getData()[0]);
                                  break;
                              // Exit system
                              case 0:
                                  break serverloop;
                              // User input an incorrect operation
                              case -1:
                                  output.writeUTF("Invalid command. You must choose the add, get, delete, or exit command.");
                                  break;
                              // Somehow, the operation id is wrong, probably due to a programming error which I may make in the future
                              default:
                                  output.writeUTF("Could not act upon interpretation. Operation id is invalid.");
                          }
                          if (statusCode != null) {
                              output.writeUTF(statusCode);
                          }
                      }
                  }
              }
          }
      
          /**
           * Adds a file to the storage
           * @param data the data of the interpretation, which includes the file name and the file content
           * @return the status code of the operation
           */
          private static String addFile(String[] data) throws IOException {
              String filepath = String.format(STORAGE_FOLDER, data[0]);
              File file = new File(filepath);
              // Checks if the storage already contains the file, the storage is full, or if the file name is incorrect (not "file1" through "file10")
              if (file.createNewFile()) {
                  try (Writer writer = new FileWriter(file)) {
                      writer.write(String.join(" ", Arrays.copyOfRange(data, 1, data.length)));
                  }
                  return "200";
              } else {
                  return "403";
              }
          }
      
          /**
           * Gets a file from the storage
           * @param name the name of the file to be retrieved
           * @return the status code of the operation + the content read from the file if the code is 200
           */
          private static String getFile(String name) throws IOException {
              String filepath = String.format(STORAGE_FOLDER, name);
              File file = new File(filepath);
              if (file.exists()) {
                  try (Reader reader = new FileReader(file)) {
                      StringBuilder string = new StringBuilder("200 ");
                      while (true) {
                          int readChar = reader.read();
                          if (readChar == -1) {
                              break;
                          } else {
                              string.append((char) readChar);
                          }
                      }
                      return string.toString();
                  }
              } else {
                  return "404";
              }
          }
      
          /**
           * Deletes a file from the storage
           * @param name the name of the file to be deleted
           * @return the status code of the operation
           */
          private static String deleteFile(String name) {
              String filepath = String.format(STORAGE_FOLDER, name);
              File file = new File(filepath);
              if (file.delete()) {
                  return "200";
              } else {
                  return "404";
              }
          }
      }
    learner_created: true
  - name: src/client/main/Actions.java
    visible: true
    text: |
      package client.main;
      
      /**
       * Enum which keeps track of which action names and ids are correct.
       */
      enum Actions {
          GET("1"), PUT("2"), DELETE("3"), EXIT("exit");
          private final String id;
          Actions(String id) {
              this.id = id;
          }
          String getId() {
              return id;
          }
      }
    learner_created: true
  - name: src/client/main/Main.java
    visible: true
    text: |
      package client.main;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.Socket;
      import java.util.Scanner;
      // import java.util.concurrent.TimeUnit;
      
      import static config.Config.ADDRESS;
      import static config.Config.PORT;
      
      public class Main {
          private static final Scanner SCANNER = new Scanner(System.in);
          public static void main(String[] args) throws IOException/*, InterruptedException*/ {
              //
              //
              // Use this when running tests. Also uncomment TimeUnit import and the InterruptedException in the throws list
              // |
              // |
              // V
              //
              // TimeUnit.SECONDS.sleep(1);
              // Gets valid user input
              SpecificUserInput userInput = new SpecificUserInput();
      
              try (Socket socket = new Socket(ADDRESS, PORT);
                   DataInputStream input = new DataInputStream(socket.getInputStream());
                   DataOutputStream output = new DataOutputStream(socket.getOutputStream()))
              {
                  // User input
                  String action = userInput.getValidAction();
                  // User input and building the request to be sent
                  switch (action) {
                      case "GET":
                          sendGetRequest(input, output);
                          break;
                      case "PUT":
                          sendPutRequest(input, output);
                          break;
                      case "DELETE":
                          sendDeleteRequest(input, output);
                          break;
                      case "EXIT":
                          sendExitRequest(output);
                  }
              }
          }
      
          private static void sendGetRequest(DataInputStream input, DataOutputStream output) throws IOException {
              System.out.print("Enter filename: ");
              String filename = SCANNER.nextLine();
              // The GET request
              output.writeUTF(Actions.GET + " " + filename);
              System.out.println("The request was sent.");
              // Checking the status code and printing the respective message
              String statusCode = input.readUTF();
              // Success
              if ("200".equals(statusCode.substring(0, 3))) {
                  System.out.printf("The content of the file is: %s\n", statusCode.substring(4));
              // Failure
              } else if ("404".equals(statusCode)) {
                  System.out.println("The response says that the file was not found!");
              }
          }
      
          private static void sendPutRequest(DataInputStream input, DataOutputStream output) throws IOException {
              System.out.print("Enter filename: ");
              String filename = SCANNER.nextLine();
              System.out.print("Enter file content: ");
              String fileContent = SCANNER.nextLine();
              // The PUT request
              output.writeUTF(Actions.PUT + " " + filename + " " + fileContent);
              System.out.println("The request was sent.");
              // Checking the status code and printing the respective message
              String statusCode = input.readUTF();
              // Success
              if ("200".equals(statusCode)) {
                  System.out.println("The response says that the file was created!");
              // Failure
              } else if ("403".equals(statusCode)) {
                  System.out.println("The response says that creating the file was forbidden!");
              }
          }
      
          private static void sendDeleteRequest(DataInputStream input, DataOutputStream output) throws IOException {
              System.out.print("Enter filename: ");
              String filename = SCANNER.nextLine();
              // The DELETE request
              output.writeUTF(Actions.DELETE + " " + filename);
              System.out.println("The request was sent.");
              // Checking the status code and printing the respective message
              String statusCode = input.readUTF();
              // Success
              if ("200".equals(statusCode)) {
                  System.out.println("The response says that the file was successfully deleted!");
              // Failure
              } else if ("404".equals(statusCode)) {
                  System.out.println("The response says that the file was not found!");
              }
          }
      
          private static void sendExitRequest(DataOutputStream output) throws IOException {
              output.writeUTF(Actions.EXIT.toString());
              System.out.println("The request was sent.");
          }
      }
    learner_created: true
  - name: src/server/main/CommandInterpreter.java
    visible: true
    text: |
      package server.main;
      
      import java.util.Arrays;
      
      /**
       * Interprets given commands. Returns data and values corresponding to what the program should do with the data
       */
      public class CommandInterpreter {
          /**
           * The method that actually interprets commands. It returns a String array that represents what operation Main should execute and any data that it might need. For example, if the operation
           * is "PUT", then it returns an array with the operation identifier of 1 and the name of the file that the program should add. But if the operation is "EXIT", then it returns an array with
           * only the operation identifier of 0, since the program doesn't need any additional data.
           * @param command the String array of each "word" in the command
           * @return the String array which tells Main what to do
           */
          Interpretation interpret(String[] command) {
              String operation = command[0];
              return switch (operation) {
                  case "GET" -> new Interpretation(1, new String[]{command[1]});
                  case "PUT" -> new Interpretation(2, Arrays.copyOfRange(command, 1, command.length));
                  case "DELETE" -> new Interpretation(3, new String[]{command[1]});
                  case "EXIT" -> new Interpretation(0);
                  default -> new Interpretation(-1);
              };
          }
      }
    learner_created: true
  - name: src/config/Config.java
    visible: true
    text: |
      package config;
      
      /**
       * A class for holding configuration.
       */
      public class Config {
          // Networking configuration
          public static final String ADDRESS = "127.0.0.1";
          public static final int PORT = 23456;
      
          // File management
          /**
           * This constant needs to be used with formatting because of the %s at the end.
           */
          //
          //
          // Use this when testing: src\server\data\%s
          //
          //
          public static final String STORAGE_FOLDER = "File Server\\task\\src\\server\\data\\%s";
      }
    learner_created: true
  - name: src/client/main/RetrievalModes.java
    visible: true
    learner_created: true
  - name: src/client/data/file1.txt
    visible: true
    learner_created: true
  - name: src/client/data/file2.txt
    visible: true
    learner_created: true
  - name: src/client/data/cat.jpg
    visible: true
    is_binary: true
    learner_created: true
  - name: test/Utils.java
    visible: false
    text: |+
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.io.File;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.Arrays;
      import java.util.Objects;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class Utils {
          public static String findId(String output) {
              Pattern pattern = Pattern.compile("ID = (\\d+)");
              Matcher matcher = pattern.matcher(output);
      
              if (matcher.find()) {
                  int count = matcher.groupCount();
                  if (count != 1) {
                      throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                  }
                  return matcher.group(1);
              } else {
                  throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
              }
          }
      
          public static void deleteTestFiles() {
              File dir = new File(FileServerTest.serverDataPath);
      
              File[] files = dir.listFiles();
              if (files != null) {
                  for (File file : files) {
                      if (file.getName().startsWith("test_purpose_")) {
                          boolean isDeleted = file.delete();
                          if (!isDeleted) {
                              throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                          }
                      }
                  }
              }
      
              File cdir = new File(FileServerTest.clientDataPath);
              files = cdir.listFiles();
              if (files != null) {
                  for (File file : files) {
                      if (file.getName().startsWith("test_purpose_")) {
                          boolean isDeleted = file.delete();
                          if (!isDeleted) {
                              throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                          }
                      }
                  }
              }
          }
      
          public static void createFiles(String clientDataPath) {
      
              for (int i = 0; i < 2; i++) {
                  try {
                      File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                      if (!file.exists()) file.createNewFile();
                      FileWriter writer = new FileWriter(file, false);
                      writer.write(String.format("test%d", i + 1));
                      writer.close();
                  } catch (IOException e) {
                      throw new RuntimeException("Can't create test files!");
                  }
      
              }
          }
      
          public static int numExistingFiles(File file) {
              File[] files = file.listFiles();
              if (files == null) {
                  return 0;
              }
              return (int) Arrays.stream(files).filter(File::exists).count();
          }
      
          private static boolean isFileExists(String path) {
              return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
          }
      
          public static boolean isClientFileExists(String fileName) {
              return isFileExists(FileServerTest.clientDataPath + fileName);
          }
      
          public static boolean isServerFileExists(String fileName) {
              return isFileExists(FileServerTest.serverDataPath + fileName);
          }
      
          public static String getServerFileContent(String fileName) {
              return getFileContent(FileServerTest.serverDataPath + fileName);
          }
      
          public static String getClientFileContent(String fileName) {
              return getFileContent(FileServerTest.clientDataPath + fileName);
          }
      
          private static String getFileContent(String fileName) {
              try {
                  return new String(Files.readAllBytes(Paths.get(fileName))).trim();
              } catch (IOException e) {
              }
              throw new WrongAnswer("Can't read files content.\n" +
                  "Make sure you close input/output streams after reading or writing files!");
          }
      
      }
    
    
    learner_created: false
  - name: src/server/main/IDMap.java
    visible: true
    learner_created: true
  - name: src/client/main/SpecificUserInput.java
    visible: true
    learner_created: true
  - name: src/server/data/no_name_id_0.txt
    visible: true
    learner_created: true
  - name: src/server/main/Session.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    After saving a file on the server you should print:
    Response says that file is saved! ID = **, where ** is an id of the file!

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Server started!
    Enter action (1 - get a file, 2 - create a file, 3 - delete a file): &gt; 2
    Enter name of the file: &gt; test_purpose_test1.txt
    That file does not exist. Make sure the file is in the client/data folder and type it again. &gt;
  time: "Sun, 14 Apr 2024 01:22:13 UTC"
record: 1
